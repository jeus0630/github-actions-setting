name: Deploy SPA to S3

on:
  pull_request:
    types:
    - opened
    - synchronize
    - closed
    branches:
    - dev
    - main

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: setup-node
      uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Cache npm modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Install Dependencies
      run: |
        cd my-app
        npm ci
    - name: Test App
      run: |
        cd my-app
        npm run test
    - name: Build
      run: |
        cd my-app
        npm run build

  set-environment:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
    - name: Set env
      id: set-env
      run: |
        echo ${{ github.base_ref }}
        echo "environment=dev" >> $GITHUB_OUTPUT

        if [[ ${{ github.base_ref }} == "master" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        fi
    - name: Check env
      run: |
        echo ${{ steps.set-env.outputs.environment }}

  deploy-s3:
    runs-on: ubuntu-latest
    needs:
      - set-environment
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment:
          - ${{ needs.set-environment.outputs.environment }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Install Dependencies
        run: |
          npm ci
      - name: Test App
        run: |
          npm run test
      - name: Build
        run: |
          npm run build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: Deploy S3
        run: |
          cd my-app
          aws s3 sync ./build s3://${{ vars.S3_BUCKET }}
      - name: CloudFront Invalidation
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUD_FRONT_ID }} --paths "/*"

  create-pr:
      if: needs.set-environment.outputs.environment == 'dev'
      runs-on: ubuntu-latest
      needs:
      - set-environment,
      - deploy
      steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Github Auth Login
        run: |
          echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | gh auth login --with-token
      - name: Create Branch
        run: |
          git switch -c release/${{ github.run_id }}
          git push origin release/${{ github.run_id }}
      - name: Create PR
        run: |
          echo ${{ github.event.pull_request.url }}
          gh pr create --base main --head release/${{ github.run_id }} --title "release/${{ github.run_id }} -> master" --body "release pr"